AN1/AN0
AN1 = low for record, high for play (controls output volume)
AN0 = low for line/pitch wheel, high for compressed/mod wheel

"funny" keypresses:
$1c = start
$1d = continue
$1e = stop
(from MIDI parser)

Mod sources
0 = off, 1 = modwheel, 2 = breath controller, 4 = foot pedal
6 = data entry slider, 7 = volume pedal, 8 = aftertouch, 9 = poly at

$8011 - dummy byte
$8012 - master tune
$8013 - pitch bend range
$8014 - velocity sensitivity
$8015 - keyboard balance
$8016 - link upper/lower
$8017 - sample time adjust
$8018 - sample filter freq
$8019 - mike/line setting
$801a - sampling threshold
$801b - user multisampling
$801c - local on/off
$801d - lfo mod source
$801e - mix mod source
$801f - aftertouch
$8020 - omni on/off?
$8021 - param 82, MIDI channel
$8022 - param 83, MIDI through
$8023 - param 84, MIDI message filter
$8024 - param 85, seq clock
$8025 - param 86, ext clock jack
$8026 - param 87, seq speed
$8027 - param 88, seq loop on/off
$8028 - pedal?
$8029 - param 91
$802a - param 92
$802b - software version
$802e - toggled in timer ISR in ROM
$802f - decremented in timer ISR in ROM
$8030 - decremented in timer ISR as $8036 is incremented
$8031 - if non-zero, decremented in ISR handler
$8032 - if non-zero, decremented in ISR handler
$8033 - decremented in ISR handler
$8034 - 16-bit value fiddled with in ISR
$8036 - incremented every second interrupt as $8030 is decremented, seq?
$8037 - if non-zero, counted down in ISR handler
$8038 - start of 32 bytes zeroed out
$8039 - initially holds address of voice parameter table
$803b - stores X while setting up voice table
$803d - stores 16-bit value, pointed by U and set in $86f6
$8040
$8041
$8045
$8047
$804d
$804e - task list counter thing
$804f - 7-byte table of values
$8056 - end of table
$8057 - set to $8107 by routine at $875e
$8059
$805b - set if $8059 is nonzero?
$805d - set to $1f along with $8207 when linked list is constructed
$805e - set to $b2be, that strange list from the "put values in memory" routine
$8061 - voice task? note parser loop? can be $8a25, $89ec, $89f6, $89a1, $82af
$8063 - computed note?
$8064
$8065 - key velocity
$8066
$8067
$8068 - stores something to do with pitch bend or new mod wheel val
$8069 - 16-bit computed pitch bend
$806b - cleared by sequencer/sustain sw.
$806c - mod wheel val in at $90b7, read at $ab76
$8070 - stores computed pitch bend amount, at $ad73
$8072 - set at $ac40, cleared at $9f95, never seems to be used?
$8076 - mix mod amount
$8077 - stores computed pitch bend amount, at $a30a
$8079 - set at $a336, cleared at $9f91, never read?
$807a - LFO mod amount
$807d
$807e
$807f
$8081
$8082 - save routine uses this, flag byte read in keystroke routine
$8083 - display timer?
$8084 - value editable? cleared for 97, 98, 99 - poss. up/down value?
$8085 - save routine uses this, load/save flag?
$8087
$8088 - edit value buffer?
$8089
$808a
$808b - edit parameter
$808c - bank to save to?
$808d - saves bank selection keystroke?
$8090 - something to do with selecting save bank?
$8091 - something to do with selecting save bank?
$8092 - save routine uses this
$8094 - wavesample start for editing
$8096 - wavesample end for editing

$8098 - thing that reads ADC uses this
$8099 - thing that reads ADC uses this
$809a - thing that reads ADC uses this

$809b - saved bank select value, even
$809c - saved bank select value, odd
$809f - 
$80a0 - max value for param?
$80a1 - min value for param?
$80a2 - set by "set two variables" $9d38 = $02, $9d41 = $04
$80a3 - set by "set two variables" $9d38 = $81, $9d41 = $82
$80a4 - might be upper/lower bank select for editing?
$80a5 - upper program
$80a7 - lower program
$80a9 - selected upper wavesample
$80aa - selected lower wavesample
$80ab
$80ac - variable to be displayed?
$80ad
$80ae - current keystroke?
$80af
$80b2
$80b3 - LED bit patterns?
$80b5 - stores bit patterns?
$80ba - 
$80bb - MIDI status byte for running status
$80bc - ring buffer store pointer
$80be - ring buffer read pointer?
$80c0 - MIDI task variable?
$80c4 - incoming MIDI channel, also used for corrected note? temp?
$80c5 - incoming MIDI status
$80c6 - saves return address in routine at $a1b1
$80ce - ACIA status byte
$80cf - sequence or sample to load?  can be 1, 2 or 3 for loading samples
* maybe command?
4, 5, 6 seems to be used for saving samples
$80d0 - sample or sequence selected?
$80d1 - used in sector finder, offset into table in bytes?
$80d2 - sample directory
$80d3 - short sequence directory
$80d4 - long sequence directory
$80d5 - first track for disk
$80d6 - first sector for disk
$80d7 - last track for disk
$80d8 - last sector for disk
$80db - end of memory copy for copying parameter block
$80dd - possibly bank value for load/save?
$80e0 - upper/lower sample = 0/2?
$80e1 - load/save in disk routines
$80e2 - load/save directory sector?
$80e3 - used in sector finder, offset?
$80e4 - set to $c0 in $ac4f if there's a sequence expander
$80e5 - set to $c000 if there's a sequence expander
$80e7 - sequencer flag?
$80e8
$80e9 - sequencer clocks?
$80ea - sequencer timing?
$80eb - sequencer timing?
$80ec
$80ee - sequence pointer?
$80f0 - sequencer timing?
$8105 - set to $ff by routine at $875E
$8106 - set to $ff by routine at $875E
$8107 - linked list, 8 bytes per entry, 30 entries
$8207 - unknown
$8208 - keystroke flag?
$821f
$8223
$8225 - start of ring buffer
$8234 - end of ring buffer
$8235 - RX buffer save pointer?
$8236 - RX buffer read pointer?
$8237 - something to do with FIRQ, MIDI?
$8278 - address to store in keystroke ringbuffer
$827a - address to fetch in keystroke ringbuffer
$827c - $10 bytes for ringbuffer
$828c - start of code?

$9009 - previous pitch wheel value
$900a - pitch wheel offset?
$900b - previous mod wheel value
$900c - stores pitch wheel value
$900d - used to compute pitch wheel average
$900e - used to compute pitch wheel average

$96fe - saves computed sampling filter cutoff

$b800 - sequence memory
$b804 - contains $b80a
$b806 - contains $b835
$b808 - contains $b80a
$b80a - contains $00c9

# possible subroutines (at least, stuff that JSRs point to)
$ab00 - (15) displays disk error message
$9431 - (12) reset some variables
$ab90 - (10) called from routine that sets up sampling?  Lots of other places
$9249 - (10) clear a bunch of variables to zero
$a1ac - (9) weird, pops return address into $80c0 and rts
$885e - (9) task list?
$8738 - (9) mashes variables about, task list?
$a404 - (7) writes values to keystroke ringbuffer between $827c and $828c
$a41a -     gets value from keystroke ringbuffer between $827c and $828c
$9d38 - (7) unknown, sets two variables
$86f6 - (7) unknown, looks task list-y
$aad2 - (6) something to do with setting up trk/sect for load/save
$95e1 - (6) unknown, calls a routine, sets two vars, calls another
$8ecf - (6) unknown - called from "initial wavesample" param setter
$9dd7 - (5) unknown, messes with keypad lines?
$9d41 - (5) unknown, sets two variables, similar to $9d38
$9a85 - (5) table lookup, voice parameters?
$986c - (5) possibly gets wavesample start and end into vars?
$9116 - (5) seems to get bit pattern for LEDs?
$8e05 - (5) unknown, looks up something in ROM, does various calculations
$87dd - (5) sets U to $867b
$87e2 -     sets U to $86a0
$87e7 -     sets U to $85c9
$9f6f - (4) reset a bunch of stuff including some variables
$9876 - (4) gets byte from sample RAM, unknown variables
$875e - (4) called during startup?
$8722 - (4) unknown, swaps some values pointed at by U and X around
$adbc - (3) unknown, involves ringbuffer
$adb6 - (3) sets A to 3 and calls $ADBC
$adb2 - (3) sets A to 1 and calls $ADBC
$adaf - (3) sets A to 0 and calls $ADBC
$ab60 - (3) unknown, clears some vars and sets others then jumps off to ADBC and friends
$aa2f - (3) get directory bytes
$a53a - (3) save sample?
$a4d4 - (3) load sample?
$a116 - (3) put MIDI clock pulse in buffer?
$a0da - (3) unknown, something to do with MIDI
$9f60 - (3) seems to be called before sampling?
$9941 - (3) unknownish, loop params?
$988f - (3) store byte in sample RAM, similar to $9876
$9858 - (3) something to do with selecting banks
$96f4 - (3) Show "Sr" on display?
$8f11 - (3) unknown, handles editing loop values
$adba - (2) ors A with $80, continues with ADBC
$aceb - (2) unknown, lots of weird compares and writes 
$aca3 - (2) unknown, lots of weird compares and jumps
$ab4e - (2) sets $80e7 to 4
$ab2c - (2) gets pointer from bottom of seq, gets value, saves
$aa0b - (2) load sequence directory?
$a97c - (2) called after saving samples
$a8b9 - (2) unknown, something to do with loading
$a847 - (2) read or write sequence
$a7ae - (2) read or write sectors following lookup table
$a78b - (2) save parameter block
$a736 - (2) load parameter block and copy into place
$a6e8 - (2) load/save upper sounds
$a69c - (2) load/save lower sounds
$a5fc - (2) load/save sequence?
$a5a1 - (2) load/save sequence?
$a0f2 - (2) send MIDI program change
$a0e2 - (2) send MIDI control change
$a0cf - (2) send MIDI pitchbend message
$a0c5 - (2) send MIDI note off
$9f9a - (2) sets up some variables
$9d4b - (2) unknown
$9cc1 - (2) unknown, display value pointed to by x
$9cc5 -     unknown, display on/oF?
$998b - (2) unknown, something to do with editing values?
$90e9 - handle keypresses in $AE
$90c0 - (2) unknown, something to do with pitch bend
$8fc8 - called while setting loop params
$8da1 - calculate filter envelope
$8c34 - calculate LFO response?
$8bcd - calculate tuning word from note number 
$896b - unknown, might parse kybd commands?
$8844 - setup oscillator modes
$87e2 - unknown
$b96e - tune filters
$b935 - calibration value for pitch wheel?
$aef0 - step head in, unused disk code
$ad9a - unknown
$ad8f - unknown
$ac27 - copy some byte?
$99ce - select through edit parameters
$9116 - LED patterns?
$8a25 - set up note on?
$89ec - set up note off?
$89f6 - log curve, note off velocity?
$a138 - check for MIDI through and fall through to...
$a13d - put B in TX ringbuffer and send



wavesample params
$09 = octave
$0a = fine tune
$0e = top key
$0f = 0 initially
$08 = 0 initially

voice table params
table starts at $b052
from $ae17 "zerofilter"
$00 = next entry in table
$02 = this entry?
$04 = wavesample for voice?
$05
$06 = note
$07
$08 = velocity?
$09 = 
$0a = program for voice
$0c = ?
$0e = 
$10 = tuning word
$12
$13 =
$14 = 
$15 = detune?
$16 = 
$17 = 
$18 = VCF offset
$1a = zero, set by stuff that fiddles with velocity?
$1c = next task
$1e = VCF Attack time A
$1f = VCF Attack time B
$20 = VCF Peak level
$21 = VCF Decay time A
$22 = VCF Decay time B
$23 = VCF Sustain level
$24 = VCF Release time A
$25 = VCF Release time B
$26 = voice velocity?
$27 = resonance
$28 = cutoff
$29
$2b = next task? initially set to enable ints and return
$2d
$2f
$33 = DCA release?
$3d
$3f
$4d

$1c tasks:
$8a95 - calculate envelope attack phase
$8aae - calculate envelope decay phase
$8ac7 - calculate envelope release phase
$8ad7 - update filter for voice

$2b tasks
$8aef - unknown
$8b0f - unknown
$8b49 - unknown
$8b81 - unknown
$8bbe - unmask ints and return
"9d38" params - all of these are "double" values
36 cutoff
70 relative filter
71 max filter
87 seq speed
24 keyboard balance
74 input filter freq
76 sample threshold
80 aftertouch depth

"9d41" params - quadruple
osc mix
osc mix vs
resonance
45-49
55-59

