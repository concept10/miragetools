Ensoniq Mirage Technical Guide
==============================

Hardware Overview
-----------------

The Mirage is based around a Motorola 6809 CPU, with a 6850 ACIA for the MIDI port, a 1772 disk controller, a 6522 VIA for IO, the 5503 DOC for sample playback, a 6500 microcontroller for the keyboard on models with a keyboard and 128kB of bank-switched sample RAM, 16kB of OS RAM, a 4kB boot ROM and an optional slot for 8kB of sequence expander memory.

The memory map is as follows:

$0000	$7fff	Sample RAM
$8000	$bfff	OS RAM
$c000	$dfff	Sequence Expander RAM
$e000	$efff	I/O ports
$e100		ACIA control port
$e200		VIA IO Register B
$e400		VCF DAC
$e800		Floppy Disk Controller
$ec00		5503 DOC
$f000	$ffff	Boot ROM

Interrupts
----------

The 6809 CPU has three interrupt pins, /NMI, /FIRQ and /IRQ.  The /NMI line is
connected to the INT pin of the floppy controller.  The /FIRQ pin is used for
the ACIA only, and the /IRQ line is shared between the DOC, VIA and FDC DRQ
pin.

Because the /IRQ pin is shared, its interrupt handler must poll the DOC and VIA
to see if they triggered an interrupt.  The floppy controller will trigger an
interrupt by pulling DRQ high, which is connected through an inverter.  This
happens when the FDC is ready to transfer a byte of data.  The FDC routines in
ROM use SYNC to wait for an interrupt, and run in an infinite loop until /NMI
is triggered by the FDC.

Since only the ACIA is connected to the /FIRQ pin its interrupt service routine
is simpler, and only polls to see if the transmit or receive register triggered
the interrupt.

Memory
------

The 128kB sample RAM is mapped in 32kB chunks between $0000 and $7fff.  Bank
selection is controlled by the lower two bits of IORB.

The OS and short sequences are loaded into RAM between $8000 and $bfff with
sequences being stored at $b800.

Firmware is contained in the ROM mapped at $f000-$ffff with the top 16 bytes
containing the eight interrupt vectors.  This ROM also contains the disk
routines, some lookup tables, and some functions to initialise and update the
DOC and filters.

IO Hardware
-----------

On keyboard models there is a 6500/11 microcontroller that handles the keyboard
and sustain pedal input.  This communicates with the VIA through a serial link,
generating a clock signal for the VIA shift register.  The VIA pulls a pin on
the 6500 low to acknowledge transfers.  The reset pin is connected to the FDC
motor on pin, so when the disk drive is started the FDC controller is held
reset.

MIDI traffic is handled by the 6850 ACIA, with its bitrate clock generated by
the VIA.  When a byte is received, it triggers /FIRQ, and if there are bytes to
transmit the appropriate routine enables the transmit interrupt.

The VIA lives a complicated life, with very nearly all of its features being used.  Timer 1 is used to generate a periodic interrupt and, during sampling, the sample clock.  The shift register is used to receive data from the keyboard controller.  The IO ports are used to control the keypad, LED display, disk drive, bank selection, analogue interface, DOC and memory paging.

IORB
0	Out	Bank 0/1
1	Out	lower/upper
2	Out	mic/line
3	Out	sample/play
4	Out	drive select
5	In	DOC CA3 
6	In	disk /READY
7	N/A	routed to ACIA clock

IORA
0	Out	LED segment 0
1	Out	LED segment 1
2	Out	LED segment 2
3	Out	Anode 1, active low
4	Out	Anode 2, active low
5	In	Keypad row 0
6	In	Keypad row 1
7	In	Keypad row 2


